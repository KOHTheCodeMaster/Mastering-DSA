
Date: 5th May 2K23 - 12:22 PM..!!

KOH Notes for Sliding Window

-----------------------------------------------------------------------------------------------------------------------------

Short n Crisp Notes:
--------------------


Definition
----------

Sliding Window technique is a problem-solving approach that involves using a fixed-size/dynamic window to iterate through an array or sequence (contiguous data structure).


Basic Idea
----------

The idea behind the Sliding Window technique is to use two pointers to maintain a window of a fixed size as it moves through the array or sequence.

The window starts from the beginning of the array or sequence, and the two pointers move towards the end, adjusting the window size as necessary.


Characteristics
---------------

The Sliding Window technique is typically used for problems that involve finding a subarray or subsequence of a certain size that satisfies certain conditions.

Space Complexity -> It is a space-efficient algorithm since it only requires O(1) space.

It works well only when iterating with Contiguous/Sequential Data Structures, including arrays, strings, and linked lists.

Limitation / Disadvantage -> it may not work well for problems that require finding overlapping subarrays or substrings.


Applications
------------


The Sliding Window technique can be used to solve a wide range of problems, including:
- Finding the maximum or minimum sum subarray of a fixed size.									-->		LeetCode #209: 	Minimum Size Subarray Sum
- Finding the longest subarray or substring of a fixed size that satisfies certain conditions.	-->		LeetCode #3: 	Longest Substring Without Repeating Characters
- Finding all subarrays or substrings of a fixed size that satisfy certain conditions.			-->		LeetCode #438: 	Find All Anagrams in a String
- Finding the number of distinct elements in all subarrays or substrings of a fixed size.		-->		LeetCode #992: 	Subarrays with K Different Integers


Implementation
--------------

The Sliding Window technique can be implemented using two pointers, which maintain the start and end of the window.

The window size is adjusted by moving the pointers, which can be done in O(1) time.

The algorithm typically runs in O(n) time, where n is the length of the array or sequence.


Algorithm
---------

Let's consider an example problem to see how the Sliding Window technique can be applied. The problem is to find the maximum sum subarray of a given array of integers.

1. Initialize two pointers, left and right, to the first element of the array.
2. Initialize a variable sum to zero.
3. Initialize a variable maxSum to negative infinity.
4. While right is less than the length of the array:
	● Add the value of the element at right to sum.
	● If sum is greater than maxSum, update maxSum to sum.
	● If sum is negative, reset sum to zero and increment left.
	● Increment right.
5. Return maxSum.


Example
-------

Example Problem: Maximum Sum Subarray

Let's consider an example problem to see how the Sliding Window technique can be applied. The problem is to find the maximum sum subarray of a given array of integers.

Given an array of integers and a fixed size k, find the maximum sum of any subarray of size k.
Using the Sliding Window technique, we can maintain a window of size k and slide it through the array, keeping track of the maximum sum of the subarray seen so far.
The algorithm runs in O(n) time, where n is the length of the array.


Common Mistakes
---------------

Not considering all possible cases when adjusting the size of the sliding window.
Forgetting to update the maximum or minimum value when moving the sliding window.
Not checking for edge cases, such as when the size of the sliding window is greater than the length of the array or sequence.


Resources
---------

Some good resources for learning about the Sliding Window technique include:
1. YouTube - Sliding Window Technique - Algorithmic Mental Models
   URL: https://www.youtube.com/watch?v=MK-NZ4hN7rs
   
2. LeetCode problems that use the Sliding Window technique:
    - LeetCode #209: 	Minimum Size Subarray Sum
    - LeetCode #3: 		Longest Substring Without Repeating Characters
    - LeetCode #438: 	Find All Anagrams in a String
    - LeetCode #992: 	Subarrays with K Different Integers
	
3. "Cracking the Coding Interview" by Gayle Laakmann McDowell

4. "Introduction to Algorithms" by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein


-----------------------------------------------------------------------------------------------------------------------------

