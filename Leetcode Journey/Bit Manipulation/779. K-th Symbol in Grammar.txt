Algorithm:

Base Case:
If n equals 1 and k equals 1, return '0' since the first row consists of only one character, '0'.
Recursive Step:
Recursively calculate the character at position k in the previous row (n - 1).
If the character at position k in the previous row is '0', return '0' if k is odd and '1' if k is even.
If the character at position k in the previous row is '1', return '1' if k is odd and '0' if k is even.
Time Complexity:

Time complexity is O(2^n), where n is the given integer representing the number of rows.
The function is called recursively for each row, resulting in exponential time complexity.
Space Complexity:

Space complexity is O(n) due to the recursion stack, where n is the given integer representing the number of rows.



Date: 9th April 2023 - 10:46 AM

Problem#: 779. K-th Symbol in Grammar

URL: https://leetcode.com/problems/k-th-symbol-in-grammar/

Keywords: Recursion, Bit Manipulation, Binary Representation

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Mastering-DSA

----------------------------------------------------------------------------------------------------

Problem:
On the first row, we write a 0. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.
Given row N and index K, return the K-th indexed symbol in row N. (The values of K are 1-indexed.) (1 indexed).

Example:
Input: N = 5, K = 9
Output: 1
Explanation: The row is [0110100110010110]
                                 â†‘
            The 9th symbol in the 5th row is 1.

Feasible Solutions:
1. Bit Manipulation Approach
2. Recursive Approach

----------------------------------------------------------------------------------------------------

Key Takeaways:
- Understanding the pattern and relationship between rows.
- Utilizing bit manipulation for efficient calculation.
- Implementing recursive logic to solve the problem.

Notes:
- Be careful with index calculations, as they are 1-indexed.
- Handle edge cases such as N = 1 separately.

New Topics Learnt:
- Bit manipulation techniques to generate the sequence.
- Recursive approach to solve the problem efficiently.

----------------------------------------------------------------------------------------------------

Approach 1: Bit Manipulation Approach

Description:
- This method utilizes bit manipulation to find the k-th character directly without generating the entire string.

Algorithm:

1. Use the binary representation of k - 1 to determine the k-th character.
2. Count the number of set bits (1s) in the binary representation of k - 1.
3. If the count of set bits is odd, return '1'; otherwise, return '0'.

Time Complexity: O(log k) - due to the bit manipulation operation to count the set bits in the binary representation of k - 1.
Space Complexity: O(1) - Constant space complexity.

----------------------------------------------------------------------------------------------------

Approach 2: Recursive Approach

Description:
- This method implements a recursive solution to find the K-th indexed symbol in row N.

Algorithm:

1. Base Case: If n is 1, return '0' since the first row consists of only one character, '0'.
2. Recursive Step: Recursively calculate the character at position k in the previous row (n - 1).
    - If the character at position k in the previous row is '0', return '0' if k is odd and '1' if k is even.
    - If the character at position k in the previous row is '1', return '1' if k is odd and '0' if k is even.

3. If the character at position k in the n-1th row is 0, return 1 if k is odd; otherwise, return 0.

Time Complexity: O(2^n) - where n is the given integer representing the number of rows.
- The function is called recursively for each row, resulting in exponential time complexity.

Space Complexity: O(n) - Space complexity grows linearly with n due to recursive stack.

----------------------------------------------------------------------------------------------------

Complete Java Solution:

*/

class Solution {

    public int kthGrammar(int N, int K) {
        // return Integer.bitCount(k - 1) % 2;
        return recursiveApproach(N, K);
    }

    private int recursiveApproach(int n, int k) {
        if (n == 1) return 0;     // Base Case
        int prev = recursiveApproach(n - 1, (k + 1) / 2);   // Recursive Step
        return (prev == 0) ? (k % 2 == 0 ? 1 : 0) : (k % 2 == 0 ? 0 : 1);
    }

}

//----------------------------------------------------------------------------------------------------
```
