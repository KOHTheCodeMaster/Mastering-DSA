
Date: 5th Jun 2K24 - 11:39 AM

Problem#: 1351. Count Negative Numbers in a Sorted Matrix

URL: https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/

Keywords: Matrix, Binary Search, Two Pointers

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Mastering-DSA

----------------------------------------------------------------------------------------------------

Problem:

Given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in `grid`.

Constraints:
- `m == grid.length`
- `n == grid[i].length`
- `1 <= m, n <= 100`
- `-100 <= grid[i][j] <= 100`

Example:
Input grid = [[ 4,  3,  2, -1],
              [ 3,  2,  1, -1],
              [ 1,  1, -1, -2],
              [-1, -1, -2, -3]]
Output: 8

----------------------------------------------------------------------------------------------------

Feasible Solutions:
1. Brute Force
2. Binary Search
3. Two Pointers (Top-Right)
4. Two Pointers (Bottom-Left)

Key Takeaways:
- Utilize the properties of the sorted matrix to efficiently count the negative numbers.
- Both row-wise and column-wise sorting helps in reducing the number of elements to be checked.

Notes:
- The brute force approach checks each element, which has a time complexity of O(m * n).
- Binary search can be applied to each row individually, improving the time complexity to O(m * log n).
- Two-pointer methods further optimize the solution by leveraging the sorted properties of the matrix.

New Topics Learnt:
- Efficient matrix traversal by taking advantage of sorted properties.

----------------------------------------------------------------------------------------------------

Approach 1: Brute Force

Description:
- Traverse the entire matrix and count the negative numbers.

Algorithm:
1. Initialize a counter to zero.
2. Iterate through each element in the matrix.
3. If an element is negative, increment the counter.
4. Return the counter.

Code for Approach:

```java
public int countNegativesBruteForce(int[][] grid) {
    /*
        Time Complexity:    O(n * m)
        Space Complexity:   O(1) - Constant Memory
        Approach:           Brute Force
     */
    int negativeNumCount = 0;
    for (int[] row : grid)
        for (int num : row)
            if (num < 0) negativeNumCount++;
    return negativeNumCount;
}
```

Time Complexity: O(m * n)
- The algorithm traverses the entire matrix.

Space Complexity: O(1)
- No extra space is used, aside from the input matrix.

----------------------------------------------------------------------------------------------------

Approach 2: Binary Search

Description:
- Apply binary search on each row to find the first negative number.

Algorithm:
1. Initialize a counter to zero.
2. Iterate through each row in the matrix.
3. For each row, apply binary search to find the first negative number.
4. Add the number of negative numbers in the row to the counter.
5. Return the counter.

Code for Approach:

```java
public int solutionUsingLowerBoundBinarySearch(int[][] grid) {
    /*
        Time Complexity:    O(n * (log m)) - Binary Search - O(log m) for each row.
        Space Complexity:   O(1) - Constant Memory
        Approach:           Binary Search - Lower Bound
     */
    int target = -1;
    int negativeNumCount = 0;

    for (int[] row : grid) {
        int left = 0;
        int right = row.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (row[mid] > target) left = mid + 1;
            else right = mid - 1;
        }

        negativeNumCount += row.length - left;
    }

    return negativeNumCount;
}
```

Time Complexity: O(m * log n)
- The algorithm applies binary search on each row.

Space Complexity: O(1)
- No extra space is used, aside from the input matrix.

----------------------------------------------------------------------------------------------------

Approach 3: Two Pointers (Top-Right)

Description:
- Start from the top-right corner and move towards the bottom-left to count the negative numbers.

Algorithm:
1. Initialize a counter to zero.
2. Start from the top-right corner of the matrix.
3. If the current element is negative, add the number of elements in the column to the counter and move left.
4. If the current element is non-negative, move down.
5. Continue until all elements are checked.
6. Return the counter.

Code for Approach:

```java
public int solutionUsingTwoPointersTopRight(int[][] grid) {
    /*
        Time Complexity:    O(m + n)
        Space Complexity:   O(1) - Constant Memory
        Approach:           Two Pointers - Starting from Top-Right element
     */

    int negativeNumCount = 0;
    int rowCount = grid.length;
    int row = 0;
    int col = grid[0].length - 1;

    while (row < rowCount && col >= 0) {
        if (grid[row][col] >= 0) row++;
        else {
            negativeNumCount += rowCount - row; //  All the elements in current column are negative
            col--;
        }
    }

    return negativeNumCount;
}
```

Time Complexity: O(m + n)
- The algorithm traverses the matrix efficiently by taking advantage of the sorted properties.

Space Complexity: O(1)
- The algorithm uses constant extra space.

----------------------------------------------------------------------------------------------------

Approach 4: Two Pointers (Bottom-Left)

Description:
- Start from the bottom-left corner and move towards the top-right to count the negative numbers.

Algorithm:
1. Initialize a counter to zero.
2. Start from the bottom-left corner of the matrix.
3. If the current element is negative, add the number of elements in the row to the counter and move up.
4. If the current element is non-negative, move right.
5. Continue until all elements are checked.
6. Return the counter.

Time Complexity: O(m + n)
- The algorithm traverses the matrix efficiently by taking advantage of the sorted properties.

Space Complexity: O(1)
- The algorithm uses constant extra space.

Code for Approach:

```java
public int solutionUsingTwoPointersBottomLeft(int[][] grid) {
    /*
        Time Complexity:    O(m + n)
        Space Complexity:   O(1) - Constant Memory
        Approach:           Two Pointers - Starting from Bottom-Left element
     */

    int negativeNumCount = 0;
    int rowCount = grid.length;
    int colCount = grid[0].length;
    int row = rowCount - 1;
    int col = 0;

    while (row >= 0 && col < colCount) {
        if (grid[row][col] >= 0) col++;
        else {
            negativeNumCount += colCount - col; //  All the elements in current column are negative
            row--;
        }
    }

    return negativeNumCount;
}
```

----------------------------------------------------------------------------------------------------

Approach: Two Pointers (Top-Right via For Loops)

Deprecated Note: This method is marked as deprecated because it uses unnecessary nested loops, but it is still a feasible solution.

Description:
- This approach uses two nested `for` loops to implement the two-pointer strategy starting from the top-right corner of the matrix.
- Despite the nested loops, the overall time complexity remains O(m + n) because each element is processed at most once.

Algorithm:
1. Initialize a counter `negativeNumCount` to zero.
2. Start from the top-right corner of the matrix.
3. Iterate through each column from right to left using the outer loop.
4. Within the outer loop, use an inner loop to iterate through the rows starting from the top row.
5. For each element:
    - If the element is non-negative, move to the next row.
    - If the element is negative, add the number of elements in the current column below the current row to the counter and break out of the inner loop.
6. Continue until all elements are checked.
7. Return the counter.

Notes:
- The outer loop ensures that each column is processed from right to left.
- The inner loop ensures that each row within the current column is processed from top to bottom.
- The algorithm is efficient because it stops further processing of a column once a negative element is found and counted.
- This approach, while using nested `for` loops, ensures that each element is processed at most once.
- When a negative element is encountered, the inner loop breaks, thus preventing unnecessary checks and maintaining the time complexity of O(m + n).

Code for Approach:

```java
@SuppressWarnings("DeprecatedIsStillUsed")
@Deprecated
public int solutionUsingTwoPointersTopRight2(int[][] grid) {
    /*
        Time Complexity:    O(m + n) - Process each row and column at most once.
        Space Complexity:   O(1) - Constant Memory.
        Approach:           Two Pointers - Unnecessary 2 for loops - Starting from Top-Right element.
     */

    int negativeNumCount = 0;
    int rowCount = grid.length;
    int colCount = grid[0].length;
    int row = 0;

    // Iterate through each column from right to left.
    for (int currentCol = colCount - 1; currentCol >= 0; currentCol--) {
        // Iterate through each row starting from the current row.

        for (int currentRow = row; currentRow < rowCount; currentRow++) {
            if (grid[currentRow][currentCol] >= 0) {
                // Move to the next row if the element is non-negative.
                row++;
            } else {
                // All rows below the current row in this column are negative.
                negativeNumCount += rowCount - currentRow;
                // Move to the next column by breaking the inner loop.
                break;
            }
        }
    }

    return negativeNumCount;
}
```

Time Complexity: O(m + n)
- Although the approach uses two nested `for` loops, each row and column are processed at most once, resulting in an overall time complexity of O(m + n).

Space Complexity: O(1)
- The algorithm uses constant extra space.

----------------------------------------------------------------------------------------------------
