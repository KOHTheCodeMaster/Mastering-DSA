
Date: 30th May 2K24 - 11:43 AM

Problem #: 744. Find Smallest Letter Greater Than Target


URL: https://leetcode.com/problems/find-smallest-letter-greater-than-target/

Keywords: Array, Binary Search

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Mastering-DSA

----------------------------------------------------------------------------------------------------

Problem:

Given a characters array `letters` that is sorted in non-decreasing order and a character `target`, return the smallest character in the array that is larger than `target`.

Note that the letters wrap around. For example, if `target` is 'z' and `letters` is ['a', 'b'], the answer is 'a'.

Example:
Input: letters = ["c", "f", "j"], target = "a"
Output: "c"

Input: letters = ["c", "f", "j"], target = "c"
Output: "f"

Feasible Solutions:
1. Binary Search

----------------------------------------------------------------------------------------------------

Key Takeaways:
- Utilize binary search to efficiently find the smallest letter greater than the target in a sorted array.
- Handle the wrap-around case by returning the first element if no letter is found greater than the target.

New Topics Learnt:
- Efficiently search for elements in a sorted array using binary search.

----------------------------------------------------------------------------------------------------

Approach 1: Binary Search

Description:
- Use binary search to find the smallest character that is greater than the given target.
- If the target character is greater than or equal to the middle character, search in the right half.
- If the target character is less than the middle character, search in the left half.
- If no such character is found, return the first character due to the wrap-around nature of the array.

Algorithm:
1. Initialize two pointers, left and right, to the start and end of the letters array respectively.
2. While left is less than or equal to right:
    - Calculate the middle index, mid.
    - If letters[mid] is less than or equal to the target, move the left pointer to mid + 1.
    - Otherwise, move the right pointer to mid - 1.
3. Return letters[left % letters.length] to handle wrap-around cases.

Code:
```java
public char findSmallestLetter(char[] letters, char target) {
    /*
        Time Complexity:    O(log n) - Binary Search
        Space Complexity:   O(1) - Constant Space
        Approach:           Binary Search
     */

    int left = 0;
    int right = letters.length - 1;

    // Perform binary search
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (letters[mid] <= target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    // Return the smallest letter greater than target, handling wrap-around
    return letters[left % letters.length];
}
```

Time Complexity: O(log n)
- The algorithm performs binary search on the sorted letters array, taking logarithmic time.

Space Complexity: O(1)
- The algorithm uses a constant amount of extra space regardless of the input size.

----------------------------------------------------------------------------------------------------
