
Date: 20th Apr 2K24 - 09:36 PM

LeetCode Problem #: 950. Reveal Cards In Increasing Order

URL: https://leetcode.com/problems/reveal-cards-in-increasing-order/

Keywords: Two Pointers, Array, Simulation

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Mastering-DSA

----------------------------------------------------------------------------------------------------

Problem:

In a deck of cards, every card has a unique integer. You can order the deck in any order you want.

Initially, all the cards start face down (unrevealed) in one deck.

Now, you do the following steps repeatedly until all cards are revealed:

- Take the top card of the deck, reveal it, and take it out of the deck.
- If there are still cards in the deck, put the next top card of the deck at the bottom of the deck.
- If there are still unrevealed cards, go back to step 1. Otherwise, stop.

Return an ordering of the deck that would reveal the cards in increasing order.

Note: The first entry in the answer is considered to be the top of the deck.

----------------------------------------------------------------------------------------------------

Key Takeaways:
- Simulation of card shuffling and revealing process.
- Understanding the order of revealing cards based on the given process.

Notes:
- We can simulate the process by sorting the deck and then revealing cards based on the given rules.
- The problem can be approached by simulating the process rather than implementing it directly.

----------------------------------------------------------------------------------------------------

Approach: Brute Force - Simulation

Description:
- Simulate the process of revealing cards based on the given rules.

Algorithm:
1. Sort the deck in increasing order.
2. Create a new array `resultDeck` of the same size as the input deck to store the result.
3. Use two pointers `resultIndex` and `deckIndex` to keep track of the positions in `resultDeck` and `deck`, respectively.
4. Initialize a boolean variable `skip` to alternate skipping and adding elements.
5. Iterate through the sorted deck:
    - If the current position in `resultDeck` is occupied, move to the next position.
    - If the current position in `resultDeck` is vacant and not supposed to be skipped, add the element from the sorted deck and move to the next vacant spot.
    - If the current position in `resultDeck` is vacant and skipped, skip adding the element.
6. Return the resulting deck.

Time Complexity: O(n log n) - Sorting the deck.
Space Complexity: O(n) - ResultDeck array.

----------------------------------------------------------------------------------------------------

Java Code Solution

```java

class Solution {

    public int[] deckRevealedIncreasing(int[] deck) {

        return solutionUsingBruteForce(deck);

    }

    //  ----------------------------------------------------------------------------------------------------

    private int[] solutionUsingSortedDeck(int[] deck) {
        /*
            Time Complexity:    O(n log n) - due to sorting
            Space Complexity:   O(n) - for the resultDeck array
            Approach:           Brute Force - iterating through the sorted deck
         */

        int[] resultDeck = new int[deck.length];
        int resultIndex = 0;    //  Pointer to keep track of the position in resultDeck
        int deckIndex = 0;      //  Pointer to iterate through the sorted deck array
        boolean skip = false;   //  Flag to alternate skipping and adding elements

        Arrays.sort(deck);

        while (deckIndex < deck.length) {

            if (resultDeck[resultIndex] != 0) {
                // If the current position in resultDeck is occupied, move to the next position
                resultIndex++;
                resultIndex %= deck.length;
            } else if (resultDeck[resultIndex] == 0 && !skip) {
                // If the current position in resultDeck is vacant and not supposed to be skipped, add the element from the sorted deck
                resultDeck[resultIndex] = deck[deckIndex++];

                //  Move Index to next vacant spot
                resultIndex++;
                resultIndex %= deck.length;

                // Set skip to true for the next iteration
                skip = true;
            } else {
                // If the current position in resultDeck is vacant and skipped, skip adding the element
                resultIndex++;
                resultIndex %= deck.length;
                skip = !skip;
            }

        }

        return resultDeck;

    }

    //  ----------------------------------------------------------------------------------------------------

```

----------------------------------------------------------------------------------------------------
