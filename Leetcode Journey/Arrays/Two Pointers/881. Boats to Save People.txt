
Date: 4th May 2K24 - 08:02 PM..!!

Problem #: 881. Boats to Save People

URL: https://leetcode.com/problems/boats-to-save-people/

Keywords: Array, Two Pointers

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Mastering-DSA

----------------------------------------------------------------------------------------------------

Problem:

The i-th person has weight people[i], and each boat can carry a maximum weight of limit.
Each boat carries at most 2 people at the same time, provided the sum of the weight of those people is at most limit.
Return the minimum number of boats to carry every given person. (It is guaranteed each person can be carried by a boat.)

Example:
Input: people = [1, 2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)

Feasible Solutions:
1. Using Two Pointers (Single Pass)

Optimized Solution: Using Two Pointers (Single Pass)

----------------------------------------------------------------------------------------------------

Key Takeaways:
- Utilize two pointers to efficiently accommodate people's weights in boats.
- Keep track of the boat's weight capacity and the number of passengers on the boat.
- Minimize the number of boats required to carry all people efficiently.

New Topics Learnt:
- Efficiently manage boat capacity and passenger count using two pointers.

----------------------------------------------------------------------------------------------------

Approach 1: Using Two Pointers (Single Pass)

Description:
- Utilize two pointers, left and right, to efficiently manage the weight accommodation in boats.
- Iterate through the people array and adjust boat capacity and passenger count as required.

Algorithm:
1. Initialize the number of boats required, numOfBoats, to 1.
2. Initialize the boat weight capacity, boatWeightCapacity, to the given limit.
3. Initialize pointers, left and right, to the start and end of the people array.
4. Initialize the passenger count, passengerCount, to 0.
5. Sort the people array in descending order to accommodate heavier people first.
6. Iterate through the people array using two pointers while left <= right:
    - Attempt to accommodate the left person (heaviest person) if there is space and capacity.
    - Attempt to accommodate the right person (lightest person) if there is space and capacity.
    - If the boat capacity is full or cannot accommodate any more people:
        - Increment the number of boats required, reset boat capacity, and passenger count.
7. Return the total number of boats required to carry all people.

Code:

```java

private int solutionUsingTwoPointers(int[] people, int limit) {
    /*
        Time Complexity:    O(n) - Linear Time to scan people
        Space Complexity:   O(1) - Constant Space
        Approach:           Using Two Pointers
     */

    int numOfBoats = 1;
    int boatWeightCapacity = limit;
    int left = 0;
    int right = people.length - 1;
    int passengerCount = 0;
    final int MAX_OCCUPANCY = 2;

    people = Arrays.stream(people).boxed()
            .sorted(Collections.reverseOrder())
            .mapToInt(Integer::intValue)
            .toArray();

    // Iterate through the people array using two pointers
    while (left <= right) {
        // Attempt to accommodate the left person
        if (passengerCount < MAX_OCCUPANCY && boatWeightCapacity >= people[left]) {
            boatWeightCapacity -= people[left++];
            passengerCount++;
        } else if (passengerCount < MAX_OCCUPANCY && boatWeightCapacity >= people[right]) {
            // Attempt to accommodate the right person
            boatWeightCapacity -= people[right--];
            passengerCount++;
        } else {
            //  If the boat capacity is full or cannot accommodate any more people:
            //  Increment boat count, reset boat capacity, and passenger count
            boatWeightCapacity = limit;
            passengerCount = 0;
            numOfBoats++;
        }
    }

    return numOfBoats;
}
```

Time Complexity: O(n)
- The algorithm iterates through the people array once, performing constant-time operations at each step.

Space Complexity: O(1)
- The algorithm uses a constant amount of extra space regardless of the input size.

----------------------------------------------------------------------------------------------------

