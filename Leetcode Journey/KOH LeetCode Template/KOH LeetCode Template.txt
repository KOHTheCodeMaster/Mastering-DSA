
Date: 4th May 2K23 - 02:10 PM

LeetCode Problem #: 75. Sort Colors

URL: https://leetcode.com/problems/sort-colors

Keywords: Two Pointers, Dutch National Flag Algorithm, Counting Sort


----------------------------------------------------------------------------------------------------

Problem: Provide a brief description of the problem with example.

Feasible Solutions:

1. Naive (Counting Sort)
2. Two Pointers (Dutch National Flag Algorithm)
3. Counting Sort
4: Three-Pointer Partitioning

Optimized Solution: Two Pointers (Dutch National Flag Algorithm)

----------------------------------------------------------------------------------------------------

Key Takeaways:
- Summarize the key insights or lessons learned from this problem.
- This can be a list of important concepts, techniques, or patterns that you've applied.

Notes:
- Additional notes 1.
- Additional notes 2.

----------------------------------------------------------------------------------------------------

Approach 1: Naive (Counting Sort)

Description: Explain the approach in a few sentences.

Time Complexity: Analyze the time complexity of the approach.

Space Complexity: Analyze the space complexity of the approach.

Java Code: Write the Java Code for the approach.

----------------------------------------------------------------------------------------------------

Approach 2: Two Pointers (Dutch National Flag Algorithm)
...
...

----------------------------------------------------------------------------------------------------

Approach N: ...
...
...

----------------------------------------------------------------------------------------------------

Complete LeetCode Solution:

class Solution {

    public void sortColors(int[] nums) {

        // usingNaiveApproach(nums);

        usingDutchNationalFlagAlgorithm(nums);

        // usingCountingSort(nums);

        // using3PointersPartitioning(nums);

    }

//  ----------------------------------------------------------------------------------------------------

    public void usingDutchNationalFlagAlgorithm(int[] nums) {
        /*
            Time:       O(n)
            Space:      O(1)
            Approach:   Using Two Pointers with Mid-Pointer acting as the key element to partition the array into three segments
        */
        ...
    }

//  ----------------------------------------------------------------------------------------------------

    public void using3PointersPartitioning(int[] nums) {
        /*
            Time:       O(n)
            Space:      O(1)
            Approach:   Using 3 Pointers to partition the array into three segments, swapping the elements if necessary,
                        and updating the pointers to keep track of the segments containing all 0s, 1s, and 2s.
        */
        ...
    }

//  ----------------------------------------------------------------------------------------------------

    public void usingCountingSort(int[] nums) {
        /*
            Time:       O(n)
            Space:      O(1)
            Approach:   Using Counting Sort Technique to count the number of occurrences of each color (0, 1, and 2) and
                        then modify the original array in place to reflect the sorted order.
        */
        ...
    }

//  ----------------------------------------------------------------------------------------------------

    public void usingNaiveApproach(int[] nums) {
        /*
            Time:       O(n)
            Space:      O(1)
            Approach:   Count the frequencies of 0s, 1s, and 2s in the array, and then
                        overwrite the array with the appropriate number of occurrences of each element in ascending order.
        */
        ...
    }

}

----------------------------------------------------------------------------------------------------
