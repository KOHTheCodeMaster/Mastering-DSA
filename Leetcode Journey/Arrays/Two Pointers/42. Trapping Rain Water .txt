
Date: 19th May 2023 - 2:30 PM

LeetCode Problem #: 42. Trapping Rain Water

URL: https://leetcode.com/problems/trapping-rain-water/

Keywords: Two Pointers, Dynamic Programming

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Mastering-DSA

----------------------------------------------------------------------------------------------------

Problem:
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The elevation map is shown above, with the blue area representing the trapped water.
             In this case, 6 units of water (blue section) are being trapped.

Feasible Solutions:

1. Two Pointers
2. Two Pointers - with Extra Arrays (Dynamic Programming)

Optimized Solution: Two Pointers

----------------------------------------------------------------------------------------------------

Key Takeaways:
- The Two Pointers technique can be used to efficiently solve the Trapping Rain Water problem.
- By maintaining two pointers, we can determine the maximum height encountered from the left and the right side.
- We calculate the trapped water at each position by considering the minimum of the maximum heights.
- Moving the pointers closer to each other and updating the maximum heights allows us to calculate the total trapped water efficiently.

----------------------------------------------------------------------------------------------------

Approach 1:

Description:

Two-Pointer approach for the "Trapping Rain Water" problem in a simpler way.

In this approach, we will use the Two Pointers technique to solve the problem efficiently.
We will maintain two pointers, `leftIndex` and `rightIndex`, pointing to the leftmost and rightmost positions of the `heights` array, respectively.
We will also keep track of the maximum height encountered from the left side (`leftMaxHeight`) and the right side (`rightMaxHeight`).

Imagine you have a series of blocks of different heights, and you want to find out how much water can be trapped between them.
First, we take two pointers, let's call them "leftIndex" and "rightIndex".
We start with leftIndex on the leftmost block and our rightIndex on the rightmost block.
Now, we move leftIndex & rightIndex closer to each other, one step at a time.
At each step, we compare the height of the blocks where leftIndex & rightIndex are.

- If the block on the leftIndex is shorter than the block on the rightIndex side,
- it means the water level could be trapped up to the height of the leftIndex block. So we focus on the left side for now.
- We check if the current leftIndex block is taller than the tallest block we have seen so far on the left side (leftMaxHeight).
  If it is, we update the leftMaxHeight.
- If the current leftIndex block is shorter than leftMaxHeight, it means there is a hollow space between the tallest block and the current block.
- We calculate the difference in height between the tallest block and the current block, and that gives us the amount of water that can be trapped.
- We add this amount to our total trapped water.
- Then, we move leftIndex to the next block and repeat the process.

If, at any point, the block on the right side is shorter than the block on the left side, we do the same steps but focusing on the right side instead.

We keep moving leftIndex & rightIndex closer to each other, always focusing on the shorter side and updating the tallest block we have seen so far on that side.
This way, we calculate the total amount of trapped water.

Once leftIndex reaches the same position as our rightIndex or passes it, we have checked all the blocks and calculated the total trapped water.

This approach helps us find the amount of trapped water efficiently, without needing to calculate the water level for each individual block separately.


Note:
- This approach calculates the trapped water based on the maximum heights from the left and right sides.
- By moving the `leftIndex` and `rightIndex` pointers towards each other and updating the maximum heights, we can calculate the trapped water efficiently.

Time Complexity: O(n), where n is the length of the `heights` array.

Space Complexity: O(1), as we are using a constant amount of extra space.

Java Code:

public int usingTwoPointers(int[] heights) {
    /*
        Time Complexity:    O(n)
        Space Complexity:   O(1)
        Approach:           Two Pointers
     */

    int water = 0;
    int leftIndex = 0;
    int rightIndex = heights.length - 1;

    int leftMaxHeight = 0;
    int rightMaxHeight = 0;

    while (leftIndex < rightIndex) {

        if (heights[leftIndex] < heights[rightIndex]) {

            if (heights[leftIndex] >= leftMaxHeight) leftMaxHeight = heights[leftIndex];
            else water += leftMaxHeight - heights[leftIndex];
            leftIndex++;

        } else {

            if (heights[rightIndex] >= rightMaxHeight) rightMaxHeight = heights[rightIndex];
            else water += rightMaxHeight - heights[rightIndex];
            rightIndex--;

        }

    }

    return water;
}

----------------------------------------------------------------------------------------------------

Approach 2: Two Pointers with Extra Arrays

Description:
- In this approach, we use two pointers and additional arrays to calculate the trapped water between blocks represented by the `height` array.
- By storing the maximum heights in separate arrays,
- we can easily access the maximum height from the left side and the maximum height from the right side for any given block.
- This information is crucial in calculating the trapped water at each block.

Algorithm:
1. Initialize the variable `water` to 0, representing the total trapped water.
2. Get the length of the `height` array and assign it to `n`.
3. Create two arrays, `leftMax` and `rightMax`, of size `n` to store the maximum heights from the left and right sides, respectively.
4. Set the initial value of `leftMax[0]` as the height of the first block, `height[0]`.
5. Set the initial value of `rightMax[n - 1]` as the height of the last block, `height[n - 1]`.
6. Iterate through the `height` array from index 1 to `n - 1` and
   calculate the maximum heights from the left side using the formula `leftMax[i] = Math.max(leftMax[i - 1], height[i])`.
7. Iterate through the `height` array from index `n - 2` to 0 and
   calculate the maximum heights from the right side using the formula `rightMax[i] = Math.max(rightMax[i + 1], height[i])`.
8. Iterate through the `height` array from index 0 to `n - 1` and
   calculate the trapped water at each position using the formula `water += Math.min(leftMax[i], rightMax[i]) - height[i]`.
9. Finally, return the value of `water`, which represents the total trapped water.

Time Complexity: O(n), where n is the length of the `height` array.

Space Complexity: O(n), as we use additional arrays `leftMax` and `rightMax` of size `n`.

Java Code:

public int usingTwoPointersExtraArrays(int[] heights) {
    /*
        Time Complexity:    O(n)
        Space Complexity:   O(n)
        Approach:           Two Pointers with extra arrays
     */

    int water = 0;
    int[] leftMaxArr = new int[heights.length];
    int[] rightMaxArr = new int[heights.length];

    leftMaxArr[0] = heights[0];
    rightMaxArr[heights.length - 1] = heights[heights.length - 1];

    for (int i = 1; i < heights.length; i++) leftMaxArr[i] = Math.max(leftMaxArr[i - 1], heights[i]);

    for (int i = heights.length - 2; i >= 0; i--) rightMaxArr[i] = Math.max(rightMaxArr[i + 1], heights[i]);

    for (int i = 0; i < heights.length; i++) water += Math.min(leftMaxArr[i], rightMaxArr[i]) - heights[i];

    return water;
}

----------------------------------------------------------------------------------------------------

Complete LeetCode Solution:

class Solution {

    public int trap(int[] height) {

        return usingTwoPointers(height);

        // return usingTwoPointersWithExtraArrays(height);

    }

//  ----------------------------------------------------------------------------------------------------

    public int usingTwoPointers(int[] heights) {
        /*
            Time Complexity:    O(n)
            Space Complexity:   O(1)
            Approach:           Two Pointers
         */

        int water = 0;
        int leftIndex = 0;
        int rightIndex = heights.length - 1;

        int leftMaxHeight = 0;
        int rightMaxHeight = 0;

        while (leftIndex < rightIndex) {

            if (heights[leftIndex] < heights[rightIndex]) {

                if (heights[leftIndex] >= leftMaxHeight) leftMaxHeight = heights[leftIndex];
                else water += leftMaxHeight - heights[leftIndex];
                leftIndex++;

            } else {

                if (heights[rightIndex] >= rightMaxHeight) rightMaxHeight = heights[rightIndex];
                else water += rightMaxHeight - heights[rightIndex];
                rightIndex--;

            }

        }

        return water;
    }

//  ----------------------------------------------------------------------------------------------------

    public int usingTwoPointersWithExtraArrays(int[] heights) {
        /*
            Time Complexity:    O(n)
            Space Complexity:   O(n)
            Approach:           Two Pointers with extra arrays
        */

        int water = 0;
        int[] leftMaxArr = new int[heights.length];
        int[] rightMaxArr = new int[heights.length];

        leftMaxArr[0] = heights[0];
        rightMaxArr[heights.length - 1] = heights[heights.length - 1];

        for (int i = 1; i < heights.length; i++) leftMaxArr[i] = Math.max(leftMaxArr[i - 1], heights[i]);

        for (int i = heights.length - 2; i >= 0; i--) rightMaxArr[i] = Math.max(rightMaxArr[i + 1], heights[i]);

        for (int i = 0; i < heights.length; i++) water += Math.min(leftMaxArr[i], rightMaxArr[i]) - heights[i];

        return water;
    }

}


----------------------------------------------------------------------------------------------------
