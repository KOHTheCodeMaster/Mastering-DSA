
Date: 4th Mar. 2K24 - 09:51 PM..!!

Problem#: 347. Top K Frequent Elements

URL: https://leetcode.com/problems/top-k-frequent-elements/

Keywords: Array, Hash Map, Priority Queue, Bucket Sort

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Mastering-DSA

----------------------------------------------------------------------------------------------------

Problem:

Given an integer array `nums` and an integer `k`, return the k most frequent elements. You may return the answer in any order.

Example:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Feasible Solutions:
1. Using Hash Map with Frequency - Bucket Sort
2. Using Priority Queue with Frequency Map
3: Using Hoare Partition Algorithm

Description:
- Utilize a hash map to store the frequency of each element.
- Utilizing a priority queue to keep track of the most frequent elements.
- Using a frequency map to efficiently count occurrences.

----------------------------------------------------------------------------------------------------

Key Takeaways:
- Efficiently finding top k frequent elements using frequency map and partition algorithm.
- Utilize hash maps for efficiently tracking element frequencies.
- Utilizing a priority queue with a custom comparator based on frequency for efficient retrieval of k most frequent elements.
- Leveraging priority queues for scenarios requiring efficient retrieval of elements with specific criteria.
- Combining data structures like priority queues and hash maps for optimized solutions.


Notes:
- Be mindful of edge cases, such as handling smaller k values or empty input arrays.
- The use of the `merge` method in the frequency map to efficiently count occurrences.
- The implementation of a custom comparator for the priority queue based on frequency.

New Topics Learnt:
- Efficiently using a priority queue with a custom comparator.
- Application of the Hoare Partition Algorithm in finding top k elements.

----------------------------------------------------------------------------------------------------

Approach 1:

Description:
- Utilize a frequency map to categorize numbers by their occurrence

Algorithm:
1. Initialize an empty HashMap, `frequencyMap`, to store the frequency of each number in the input array, `nums`.
2. Iterate through each number, `x`, in `nums`.
    - Update the frequency map, incrementing the count for `x`.
3. Initialize a list of lists, `numsByFreqList`, to categorize numbers by their frequencies.
4. Iterate through the keys of `frequencyMap`.
    - Get the frequency, `xFreq`, for each number.
    - Retrieve the list of numbers, `numsWithXFreq`, associated with `xFreq` in `numsByFreqList`.
    - If `numsWithXFreq` is null, create a new list and add `x` to it. Otherwise, append `x` to the existing list.
5. Find the maximum frequency, `maxFrequency`, among all numbers in `frequencyMap`.
6. Initialize an empty list, `result`, to store the k most frequent numbers.
7. Iterate from `maxFrequency` to 1.
    - Check if the list at index `i` in `numsByFreqList` is not null.
    - If not null, add all numbers from the list to the result until the result size reaches k.
8. Convert the result list to an array and return it.

Time Complexity:  O(n), where n is the length of the input array, `nums`.
Space Complexity: O(n), considering the space used for the frequency map and the list of numbers by frequency.

Code:

```java

private int[] solutionUsingHashMap(int[] nums, int k) {
    /*
        Time Complexity:    O(n) - Linear scan through nums
        Space Complexity:   O(n) - Each element in nums has an entry in the frequency map
        Approach:           Using Frequency Map
    */

    // Result list to store the k most frequent numbers
    List<Integer> result = new ArrayList<>();

    // Generate a frequency map for each number in nums
    Map<Integer, Integer> frequencyMap = new HashMap<>();
    for (int x : nums) freqMap.put(x, freqMap.getOrDefault(x, 0) + 1);

    // List to store numbers grouped by their frequency
    List<List<Integer>> numsByFreqList = new ArrayList<>();

    // Index represents frequency, and value is a list of numbers with the same frequency
    for (int i = 0; i < nums.length + 1; i++) numsByFreqList.add(null);

    // Populate numsByFreqList based on frequencyMap
    for (int x : frequencyMap.keySet()) {

        int xFreq = frequencyMap.get(x);
        List<Integer> numsWithXFreq = numsByFreqList.get(xFreq);

        if (numsWithXFreq == null) {
            numsWithXFreq = new ArrayList<>();
            numsWithXFreq.add(x);
            numsByFreqList.set(xFreq, numsWithXFreq);
        } else numsWithXFreq.add(x);

    }

    int maxFrequency = Collections.max(frequencyMap.values());

    // Collect the k most frequent numbers from numsByFreqList
    for (int i = maxFrequency; i > 0 && result.size() < k; i--)
        if (numsByFreqList.get(i) != null) result.addAll(numsByFreqList.get(i));

    // Convert the result list to an array
    return result.stream().mapToInt(Integer::intValue).toArray();
}

```

----------------------------------------------------------------------------------------------------

Approach 2: Using Priority Queue with Frequency Map

Description:
- Count the frequency of each element using a frequency map.
- Utilize a priority queue to keep track of the k most frequent elements.
- Poll elements from the priority queue to obtain the final result.

Algorithm:
1. Initialize an empty HashMap, `freqMap`, to store the frequency of each number in the input array `nums`.
2. Iterate through each number, `num`, in the input array `nums`.
    - Update the frequency count of `num` in the `freqMap`.
3. Initialize a PriorityQueue, `priorityQueue`, with a comparator based on the frequency of numbers.
4. Iterate through the entries in the `freqMap`.
    - Add each entry to the `priorityQueue`.
    - If the size of the `priorityQueue` exceeds `k`, remove the element with the lowest frequency.
5. Initialize an array, `resultArr`, to store the k most frequent elements.
6. Iterate from `k-1` to `0` and populate `resultArr` in reverse order from the `priorityQueue`.
7. Return `resultArr` as the output.

Code:

```java

private int[] solutionUsingPriorityQueue(int[] nums, int k) {
    /*
        Time Complexity:    O(n * log(k))
        Space Complexity:   O(n * log(k))
        Approach:           Using Priority Queue with a custom comparator based on frequency
     */

    int[] resultArr = new int[k];

    //  Create a frequency map to store the count of each number in nums
    Map<Integer, Integer> freqMap = new HashMap<>();
    for (int x : nums) freqMap.merge(x, 1, Integer::sum);

    //  Create a min heap (priority queue) based on the frequency of numbers
    PriorityQueue<Map.Entry<Integer, Integer>> priorityQueue = new PriorityQueue<>(Comparator.comparingInt(Map.Entry::getValue));

    for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
        priorityQueue.add(entry);
        // If the size of the priority queue exceeds k, remove the element with the lowest frequency
        if (priorityQueue.size() > k) priorityQueue.poll();
    }

    // Populate the result array with the k most frequent elements in reverse order
    for (int i = k - 1; i >= 0; i--) resultArr[i] = Objects.requireNonNull(priorityQueue.poll()).getKey();

    return resultArr;

}

```

Time Complexity: O(n * log(k))
- We iterate through the frequency map entries (n entries).
- Each insertion and removal in the priority queue takes log(k) time.
- Polling every time the size of priorityQueue becomes k keeps the size of the queue limited to k (not equal to n).
- Overall time complexity is O(n * log(k)).

Space Complexity: O(n)
- The space complexity is dominated by the frequency map, which has at most n entries.
- The priority queue has a maximum size of k.
- Overall space complexity is O(n).

----------------------------------------------------------------------------------------------------

Approach 3: Using Hoare Partition Algorithm

- Description: Finds the top k elements in an array using the Hoare Partition Algorithm.

Algorithm:
1. Initialize a HashMap, `freqMap`, to count the frequency of each element in the input array `nums`.
2. Convert the unique keys from `freqMap` to an array, `keys`.
3. Calculate the `topKSeparatorIndex` as the index of the (n-k)th least frequent element in the sorted array (0-based),
    where n is the length of `keys` array.
4. Call `partitionKeysForTopKElements` to rearrange the elements in the `keys` array based on their frequency.
5. Return an array containing the top k frequent elements,
    obtained by copying a subarray from `keys` starting from `topKSeparatorIndex + 1` to the end.

Algorithm (partitionKeysForTopKElements):
1. Initialize pointers `left` and `right` to 0 and `keys.length - 1` respectively.
2. While `left` is not equal to `right`:
    a. Call `partitionKeysBasedOnFrequency` to find the pivot index.
    b. If the pivot index is equal to `topKSeparatorIndex`, return from the function.
    c. If the pivot index is greater than `topKSeparatorIndex`, update `right` to `pivotIndex - 1`.
    d. If the pivot index is less than `topKSeparatorIndex`, update `left` to `pivotIndex + 1`.

Algorithm (partitionKeysBasedOnFrequency):
1. Handle the base case when `right` is less than `left`.
2. Set the pivot frequency as the frequency of the rightmost element in `keys`.
3. Initialize `pivotIndex` to `left`.
4. Iterate through the elements from `left` to `right` in `keys`.
    - If the frequency of the element at index `i` is less than the pivot frequency,
        swap the elements at indices `i` and `pivotIndex` and increment `pivotIndex`.
5. Swap the elements at indices `pivotIndex` and `right` to place the pivot at its correct position.
6. Return the `pivotIndex`.

Time Complexity: O(n * log(k)), where n is the length of the input array `nums`.
- The time complexity is dominated by the sorting step, which involves partitioning the array based on frequency
using the Hoare Partition Algorithm.

Space Complexity: O(n), considering the space used for the frequency map and the array of unique keys.

This algorithm efficiently identifies the top k frequent elements without sorting the entire array,
leveraging the characteristics of the Hoare Partition Algorithm.


Code:

```java
private int[] solutionUsingHoarePartitionAlgorithm(int[] nums, int k) {
    /*
        Time Complexity:    O(n * log(k))
        Space Complexity:   O(n)
        Approach:           Using Hoare Partition Algorithm and Frequency Map
        Note:               n is the number of elements in nums.
    */

    Map<Integer, Integer> freqMap = new HashMap<>();
    for (int x : nums) freqMap.merge(x, 1, Integer::sum);

    int[] keys = freqMap.keySet().stream().mapToInt(Integer::intValue).toArray();
    int topKSeparatorIndex = keys.length - k - 1;

    partitionKeysForTopKElements(keys, freqMap, topKSeparatorIndex);

    return Arrays.copyOfRange(keys, topKSeparatorIndex + 1, keys.length);
}

private void partitionKeysForTopKElements(int[] keys, Map<Integer, Integer> freqMap, int topKSeparatorIndex) {
    int left = 0;
    int right = keys.length - 1;

    while (left != right) {
        int pivotIndex = partitionKeysBasedOnFrequency(keys, freqMap, left, right);

        if (pivotIndex == topKSeparatorIndex) return;
        else if (pivotIndex > topKSeparatorIndex) right = pivotIndex - 1;
        else left = pivotIndex + 1;
    }
}

private int partitionKeysBasedOnFrequency(int[] keys, Map<Integer, Integer> freqMap, int left, int right) {
    if (right < left) return right;

    int pivot = freqMap.get(keys[right]);
    int pivotIndex = left;

    for (int i = left; i < right; i++)
        if (freqMap.get(keys[i]) < pivot) swapElements(keys, i, pivotIndex++);

    swapElements(keys, pivotIndex, right);

    return pivotIndex;
}

private void swapElements(int[] keys, int i, int j) {
    int temp = keys[i];
    keys[i] = keys[j];
    keys[j] = temp;
}
```

Time Complexity: O(n * log(k))
- Iterate through each unique key (element) and perform partition operations, which takes O(log(k)) time.

Space Complexity: O(n)
- We use a frequency map to store the occurrences of each element.


----------------------------------------------------------------------------------------------------

Complete LeetCode Solution in Java:

```java

class Solution {

    public int[] topKFrequent(int[] nums, int k) {

        // return solutionUsingHashMap(nums, k);

        return solutionUsingPriorityQueue(nums, k);

    }

    // ----------------------------------------------------------------------------------------------------

    private int[] solutionUsingHashMap(int[] nums, int k) {
        /*
            Time Complexity:    O(n) - Linear scan through nums
            Space Complexity:   O(n) - Each element in nums has an entry in the frequency map
            Approach:           Using Frequency Map
        */

        // Result list to store the k most frequent numbers
        List<Integer> result = new ArrayList<>();

        // Generate a frequency map for each number in nums
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int x : nums) freqMap.put(x, freqMap.getOrDefault(x, 0) + 1);

        // List to store numbers grouped by their frequency
        List<List<Integer>> numsByFreqList = new ArrayList<>();

        // Index represents frequency, and value is a list of numbers with the same frequency
        for (int i = 0; i < nums.length + 1; i++) numsByFreqList.add(null);

        // Populate numsByFreqList based on frequencyMap
        for (int x : freqMap.keySet()) {

            int xFreq = freqMap.get(x);
            List<Integer> numsWithXFreq = numsByFreqList.get(xFreq);

            if (numsWithXFreq == null) {
                numsWithXFreq = new ArrayList<>();
                numsWithXFreq.add(x);
                numsByFreqList.set(xFreq, numsWithXFreq);
            } else numsWithXFreq.add(x);

        }

        int maxFrequency = Collections.max(freqMap.values());

        // Collect the k most frequent numbers from numsByFreqList
        for (int i = maxFrequency; i > 0 && result.size() < k; i--)
            if (numsByFreqList.get(i) != null) result.addAll(numsByFreqList.get(i));

        // Convert the result list to an array
        return result.stream().mapToInt(Integer::intValue).toArray();
    }

    // ----------------------------------------------------------------------------------------------------

    private int[] solutionUsingPriorityQueue(int[] nums, int k) {
        /*
            Time Complexity:    O(n * log(k)) - Each insertion and removal in the priority queue takes log(k)
            Space Complexity:   O(n) - dominated by the frequency map, which has at most n entries
            Approach:           Using Priority Queue with a custom comparator based on frequency
         */

        int[] resultArr = new int[k];

        //  Create a frequency map to store the count of each number in nums
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int x : nums) freqMap.merge(x, 1, Integer::sum);

        //  Create a min heap (priority queue) based on the frequency of numbers
        PriorityQueue<Map.Entry<Integer, Integer>> priorityQueue = new PriorityQueue<>(Comparator.comparingInt(Map.Entry::getValue));

        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            priorityQueue.add(entry);
            // If the size of the priority queue exceeds k, remove the element with the lowest frequency
            if (priorityQueue.size() > k) priorityQueue.poll();
        }

        // Populate the result array with the k most frequent elements in reverse order
        for (int i = k - 1; i >= 0; i--) resultArr[i] = Objects.requireNonNull(priorityQueue.poll()).getKey();

        return resultArr;

    }

    // ----------------------------------------------------------------------------------------------------

}
```

----------------------------------------------------------------------------------------------------
