
Date: 2nd Mar. 2K24 - 05:08 PM..!!

Problem#: 49. Group Anagrams

URL: https://leetcode.com/problems/group-anagrams

Keywords: String, Hash Map, Array

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Mastering-DSA

----------------------------------------------------------------------------------------------------

Problem:

Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.
An Anagram is a word or phrase formed by rearranging the letters of another.

Example:
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["eat","tea","ate"],["tan","nat"],["bat"]]

Feasible Solutions:
1. Using HashMap with Char Freq Map as Key
2. Using HashMap with Character Frequency as Key
3. Using HashMap with Sorted Word as Key
4. Using Character Frequency Array

Optimized Solution: Using HashMap
Description:
- The hashmap approach provides a clean categorization of anagrams without the need for sorting or character frequency arrays.

Optimization:
- Utilize a hashmap to categorize anagrams based on character frequency maps.
- This approach avoids the sorting overhead and provides a more straightforward solution.

----------------------------------------------------------------------------------------------------

Key Takeaways:
- Group anagrams efficiently by utilizing hash maps and character frequency arrays.
- HashMaps are powerful for grouping elements based on specific properties.
- Understand the characteristics of strings and leverage them for optimized solutions.

Notes:
- The character frequency array approach uses a 2D array to store the frequency of each character in each word.
- Employing a custom key generation strategy to represent anagrams.
- Special considerations are taken to handle edge cases or unique scenarios.

New Topics Learnt:
- Crafting a custom key from character frequencies for better data organization.
- Efficiently group anagrams using hash maps and character frequency arrays.

----------------------------------------------------------------------------------------------------

Approach 1: Using HashMap

Description:
- Categorize anagrams using a hash map where the key is the character frequency map, and the value is a list of anagrams.
- Anagrams have the same character frequency maps.

Algorithm:
1. Initialize an empty HashMap, `charFreqMapToWords`, to store anagrams grouped by their character frequency maps.
2. Iterate through each word, `currentWord`, in the input array, `strs`.
    - Generate a character frequency map, `currentWordCharFreqMap`, using the `generateCharFreqMap` method for `currentWord`.
    - Get the list of words, `wordsWithSameCharFreq`, associated with `currentWordCharFreqMap` in `charFreqMapToWords`.
    - Add `currentWord` to `wordsWithSameCharFreq`.
    - Update `charFreqMapToWords` with `currentWord` added to the list for `currentWordCharFreqMap`.
3. After iterating through all words, the `charFreqMapToWords` HashMap contains groups of anagrams.
4. Initialize an empty list, `groupedAnagrams`, to store the final result.
5. Iterate through the values (ArrayLists) in `charFreqMapToWords`.
    - Add each ArrayList to `groupedAnagrams`.
6. Return `groupedAnagrams` as the output.

Code:

```java
private List<List<String>> solutionUsingHashMap(String[] strs) {
   - /*
        Time Complexity:    O(n * m)
        Space Complexity:   O(n * m)
        Approach:           Using HashMap
        Note:               n is the number of words and m is the average length of the words.
    */

    List<List<String>> groupedAnagrams;

    //  Store CharFreqMap as Key & List of words that has the same CharFreqMap as Value
    Map<Map<Character, Integer>, List<String>> charFreqMapToWords = new HashMap<>();

    for (String currentWord : strs) {
        Map<Character, Integer> currentWordCharFreqMap = generateCharFreqMap(currentWord);

        //  Get the list of words for CurrentWord's CharFreqMap
        List<String> wordsWithSameCharFreq = charFreqMapToWords.getOrDefault(currentWordCharFreqMap, new ArrayList<>());
        wordsWithSameCharFreq.add(currentWord);

        //  Update charFreqMapToWords with currentWord Added to the list for currentWordCharFreqMap
        charFreqMapToWords.put(currentWordCharFreqMap, wordsWithSameCharFreq);
    }

    groupedAnagrams = new ArrayList<>(charFreqMapToWords.values());
    return groupedAnagrams;
}

private Map<Character, Integer> generateCharFreqMap(String word) {
    Map<Character, Integer> charFreqMap = new HashMap<>();

    for (Character c : word.toCharArray()) charFreqMap.put(c, charFreqMap.getOrDefault(c, 0) + 1);

    return charFreqMap;
}
```

Time Complexity: O(n * m)
- We iterate through each word in `strs` (n words).
- For each word, we iterate through its characters (of average length m).
- Overall time complexity is O(n * m).

Space Complexity: O(n * m)
- We use a hash map to store anagrams, and the maximum size of the hash map is proportional to the input size.
- The space complexity is O(n * m).

----------------------------------------------------------------------------------------------------

Approach 2: Using HashMap with Char Frequency as Key


Description:
- This approach groups anagrams using a HashMap. Anagrams with the same character frequency patterns are grouped together.

Algorithm:
1. Initialize an empty HashMap, `strKeyCharFreqToWords`, to store anagrams grouped by their character frequency patterns.
2. Iterate through each word, `currentWord`, in the input array, `strs`.
    - Generate a string key representing the character frequency pattern, `currentWordStrKeyCharFreq`, using the `generateStrKeyCharFreq` method for `currentWord`.
    - Get the list of words, `wordsWithSameStrKeyCharFreq`, associated with `currentWordStrKeyCharFreq` in `strKeyCharFreqToWords`.
    - Add `currentWord` to `wordsWithSameStrKeyCharFreq`.
    - Update `strKeyCharFreqToWords` with `currentWord` added to the list for `currentWordStrKeyCharFreq`.
3. After iterating through all words, the `strKeyCharFreqToWords` HashMap contains groups of anagrams.
4. Initialize an empty list, `groupedAnagrams`, to store the final result.
5. Iterate through the values (ArrayLists) in `strKeyCharFreqToWords`.
    - Add each ArrayList to `groupedAnagrams`.
6. Return `groupedAnagrams` as the output.

Code:

```java
private List<List<String>> solutionUsingHashMapWithCharFreqAsKey(String[] strs) {
    /*
        Time Complexity:    O(n * m)
        Space Complexity:   O(n * m)
        Approach:           Using HashMap
        Note:               n is the number of words, and m is the average length of the words.
    */

    List<List<String>> groupedAnagrams;

    //  Store strKeyCharFreq as Key & List of words that have the same strKeyCharFreq as Value
    Map<String, List<String>> strKeyCharFreqToWords = new HashMap<>();

    for (String currentWord : strs) {
        String currentWordStrKeyCharFreq = generateStrKeyCharFreq(currentWord);

        List<String> wordsWithSameStrKeyCharFreq = strKeyCharFreqToWords.getOrDefault(currentWordStrKeyCharFreq, new ArrayList<>());
        wordsWithSameStrKeyCharFreq.add(currentWord);

        strKeyCharFreqToWords.put(currentWordStrKeyCharFreq, wordsWithSameStrKeyCharFreq);
    }

    groupedAnagrams = new ArrayList<>(strKeyCharFreqToWords.values());
    return groupedAnagrams;
}

private String generateStrKeyCharFreq(String word) {
    //  Generate a unique string key from character frequencies
    StringBuilder strKeyCharFreq = new StringBuilder();
    int[] arrCharFreq = new int[26];

    for (Character c : word.toCharArray()) arrCharFreq[c - 'a']++;

    //  Store Char Freq Pattern in the form of String | E.g.: AC - 1 0 1 0 0 0 ... -> 101000...
    for (int x : arrCharFreq) {
        /*
          To Separate the special edge case of bdddddddddd, bbbbbbbbbbc
          where the Char Freq Str becomes the same for 2 different strings
          Hence, adding extra space before & after 2 digit freq as salt in the key to make Char Freq Str Key different for each string
          Before Salt: bdddddddddd -> 010100000000000000000000000  |  bbbbbbbbbbc -> 010100000000000000000000000
          After  Salt: bdddddddddd -> 010 10 000...  |  bbbbbbbbbbc -> 0 10 1000...
        */
        if (x > 9) strKeyCharFreq.append(" ");
        strKeyCharFreq.append(x);
        if (x > 9) strKeyCharFreq.append(" ");
    }

    return strKeyCharFreq.toString();
}

Time Complexity: O(n * m)
- The time complexity is proportional to the number of words (n) and the average length of the words (m).

Space Complexity: O(n * m)
- The space complexity is determined by the number of words (n) and the average length of the words (m).

----------------------------------------------------------------------------------------------------

Approach 3: Using HashMap With Sorted Word As Key

Description:
- This approach uses a HashMap to group anagrams based on the sorted order of characters.

Algorithm:
1. Initialize an empty HashMap, `sortedWordToWords`, to store the anagrams grouped by their sorted characters.
2. Iterate through each word, `word`, in the input array, `strs`.
    - Convert `word` to a character array, `wordCharArr`.
    - Sort the characters in `wordCharArr` in ascending order.
    - Convert the sorted `wordCharArr` back to a string, `sortedWord`.
3. Check if `sortedWord` is already a key in `sortedWordToWords`.
    - If not, add `sortedWord` as a key with an empty ArrayList as its value.
4. Add the original `word` to the ArrayList associated with the key `sortedWord` in `sortedWordToWords`.
5. After iterating through all words, the `sortedWordToWords` HashMap contains groups of anagrams.
6. Initialize an empty list, `groupedAnagrams`, to store the final result.
7. Iterate through the values (ArrayLists) in `sortedWordToWords`.
    - Add each ArrayList to `groupedAnagrams`.
8. Return `groupedAnagrams` as the output.

Code:

```java
private List<List<String>> solutionUsingHashMapWithSortedWordAsKey(String[] strs) {
    /*
        Time Complexity:    O(n * m * log(m))
        Space Complexity:   O(n * m)
        Approach:           Using HashMap With Sorted Word As Key
        Note:               n is the number of words, and m is the average length of the words.
    */

    List<List<String>> groupedAnagrams;

    //  Store sortedWord as Key & List of words that have the same sortedWord as Value
    Map<String, List<String>> sortedWordToWords = new HashMap<>();

    for (String word : strs) {

        char[] wordCharArr = word.toCharArray();
        Arrays.sort(wordCharArr);

        String sortedWord = new String(wordCharArr);

        if (!sortedWordToWords.containsKey(sortedWord))
            sortedWordToWords.put(sortedWord, new ArrayList<>());

        sortedWordToWords.get(sortedWord).add(word);

    }

    groupedAnagrams = new ArrayList<>(sortedWordToWords.values());
    return groupedAnagrams;
}
```

Time Complexity: O(n * m * log(m))
- The time complexity is proportional to the number of words (n), the average length of the words (m), and the sorting operation.

Space Complexity: O(n * m)
- The space complexity is determined by the number of words (n) and the average length of the words (m).

----------------------------------------------------------------------------------------------------

Approach 4: Using Character Frequency Array

Description:
- Categorize anagrams using a 2D array to represent the character frequency array for each word.

Algorithm:
1. Initialize an empty list, `groupedAnagrams`, to store the final result.
2. Generate character frequency arrays for all words in the input array, `strs`, using the `generateCharFreqArrOfAllWords` method.
3. Initialize a boolean array, `isProcessed`, to keep track of processed words.
4. Initialize two pointers, `leftPointer` and `rightPointer`, to iterate through each word in `strs`.
5. Initialize an empty list, `currentAnagramGroup`, to store the current group of anagrams.
6. Iterate through each word in `strs` using `leftPointer`.
    - Get the character frequency array for the left word, `leftWordFreqArr`, using the precomputed array.
    - Check if `leftPointer` has been processed. If yes, increment `leftPointer` and reset `rightPointer` to `leftPointer`.
    - If `leftPointer` is equal to `rightPointer`, add the word at `leftPointer` to the `currentAnagramGroup`.
    - Increment `rightPointer` and check the following conditions:
        - If `rightPointer` reaches the end of `strs`, move `leftPointer` by 1 and reset `rightPointer` to `leftPointer`.
        - If the char freq array of the left word is equal to the char freq array of the right word,
          add the word at `rightPointer` to `currentAnagramGroup` and mark it as processed.
7. Add `currentAnagramGroup` to `groupedAnagrams`.
8. Continue steps 6-7 until all words in `strs` are processed.
9. Return `groupedAnagrams` as the output.

Time Complexity:
- O(n * m), where n is the number of words, and m is the average length of the words.
- This is because generating the character frequency array has a linear time complexity.

Space Complexity:
- O(n * m), where n is the number of words, and m is the average length of the words.
- This accounts for the character frequency array for each word and the boolean array for processed words.


generateCharFreqArrOfAllWords() -> Generating Character Frequency Arrays for All Words

Description:
- The method `generateCharFreqArrOfAllWords` is responsible for creating an array of character frequency arrays,
- where each array corresponds to the character frequencies of a word.

Algorithm:
1. Initialize a 2D array, `arrOfCharFreqArr`, to store the character frequency arrays for all words.
2. Iterate through each word in the input array, `words`.
    - Initialize an array, `tempArrCharFreq`, to represent the character frequency array for the current word.
    - Iterate through each character in the current word.
        - Increment the corresponding index in `tempArrCharFreq` based on the character's position in the English alphabet.
    - Add `tempArrCharFreq` to the `arrOfCharFreqArr` at the current index.
3. Return the resulting 2D array, `arrOfCharFreqArr`.

Time Complexity:
- O(n * m), where n is the number of words, and m is the average length of the words.
- This is because, for each word, the method iterates through each character.

Space Complexity:
- O(n * m), where n is the number of words, and m is the average length of the words.
- The space complexity accounts for the 2D array storing the character frequency arrays for each word.

Code:

private List<List<String>> solutionUsingCharFreqArr(String[] strs) {
    /*
        Time Complexity:    O(n * m)
        Space Complexity:   O(n * m)
        Approach:           Using Character Frequency Array
        Note:               n is the number of words and m is the average length of the words.
    */

    List<List<String>> groupedAnagrams = new ArrayList<>();

    //  Generate CharFreqArr for all words of strs
    int[][] charFreqArrays = generateCharFreqArrOfAllWords(strs);
    boolean[] isProcessed = new boolean[strs.length];

    List<String> currentAnagramGroup = new ArrayList<>();
    int leftPointer = 0;
    int rightPointer = 0;

    //  Iterate each word of strs
    while (leftPointer < strs.length) {

        int[] leftWordFreqArr = charFreqArrays[leftPointer];

        if (isProcessed[leftPointer]) {
            leftPointer++;
            rightPointer = leftPointer;
            continue;
        } else if (leftPointer == rightPointer) currentAnagramGroup.add(strs[leftPointer]);

        rightPointer++;

        if (rightPointer == strs.length) {
            //  Move leftPointer by 1 & reset rightPointer with leftPointer
            isProcessed[leftPointer] = true;
            leftPointer++;
            rightPointer = leftPointer;

            groupedAnagrams.add(currentAnagramGroup);
            currentAnagramGroup = new ArrayList<>();

        } else if (Arrays.equals(leftWordFreqArr, charFreqArrays[rightPointer])) {
            currentAnagramGroup.add(strs[rightPointer]);
            isProcessed[rightPointer] = true;
        }

    }

    return groupedAnagrams;
}

private int[][] generateCharFreqArrOfAllWords(String[] words) {
    int[][] arrOfCharFreqArr = new int[words.length][26];

    for (int i = 0; i < words.length; i++) {
        String currentWord = words[i];

        int[] tempArrCharFreq = new int[26];
        for (char c : currentWord.toCharArray()) tempArrCharFreq[c - 'a']++;

        arrOfCharFreqArr[i] = tempArrCharFreq;
    }

    return arrOfCharFreqArr;
}
```

Time Complexity: O(n * m)
- We iterate through each word in `strs` (n words).
- For each word, we iterate through its characters (of average length m).
- Overall time complexity is O(n * m).

Space Complexity: O(n * m)
- We use a 2D array to store character frequency arrays for each word.
- The space complexity is O(n * m).

----------------------------------------------------------------------------------------------------

Comparing Trade-offs for using HashMap & Arrays:

In the context of the "Group Anagrams" problem and the two approaches (using HashMap and Character Frequency Array), the trade-offs are primarily related to time and space complexities.

Approach 1: Using HashMap

Trade-offs:
1. Pros (Advantages):
   - Flexibility in Handling Anagrams: The use of a HashMap allows for flexible handling of anagrams, making it easy to group words with the same character frequency map.
   - Improved Readability: The use of HashMap operations can lead to cleaner and more readable code.

2. Cons (Disadvantages):
   - Space Overhead: The HashMap introduces additional space overhead. Each character frequency map is stored as a key, and for large datasets with long words, this can lead to increased space complexity.
   - Potential Hash Collisions: Although HashMap operations are generally O(1), in the worst case, hash collisions can occur, leading to a performance hit.

Approach 2: Using Character Frequency Array

Trade-offs:
1. Pros (Advantages):
   - Simplicity and Predictability: The character frequency array approach is straightforward and doesn't involve complex data structures like HashMap. It can lead to simpler and more predictable code.
   - Constant Time Array Operations: Accessing and updating elements in an array is typically constant time, providing efficiency.

2. Cons (Disadvantages):
   - Fixed Size: The character frequency array approach assumes a fixed size (26 for the English alphabet). This might not be suitable for languages with larger character sets.
   - Space Complexity: Similar to the HashMap approach, the space complexity can be significant for large datasets with long words.

Overall Comparison:

- Space Complexity:
Both approaches have the same O(n * m) space complexity, where n is the number of words and m is the average length of the words. The space complexity is dominated by the storage of character frequency maps or arrays.

- Time Complexity:
Both approaches have the same O(n * m) time complexity, as they involve iterating through each word and performing operations proportional to the length of the words.

How They Differ:
- The primary difference lies in the data structures used.
  The HashMap approach provides flexibility but comes with additional space overhead,
  while the character frequency array approach is simpler but assumes a fixed-size character set.

Considerations for Choosing:
- For small to moderately sized datasets, either approach is reasonable. The choice may depend on coding preferences and readability.
- If space efficiency is a priority, and the character set is known and limited, the character frequency array approach might be preferred.
- If handling varying character sets or improving readability is crucial, the HashMap approach may be a better fit.

In summary, the choice between these approaches involves balancing the need for flexibility, readability, 
and space efficiency based on the specific requirements of the problem and the characteristics of the input data.

----------------------------------------------------------------------------------------------------

Complete LeetCode Solution in Java:

```java

class Solution {

    public List<List<String>> groupAnagrams(String[] strs) {

        // return solutionUsingHashMap(strs);

        // return solutionUsingHashMapWithCharFreqAsKey(strs);

        return solutionUsingHashMapWithSortedWordAsKey(strs);

        // return solutionUsingCharFreqArr(strs);

    }

    //  ----------------------------------------------------------------------------------------------------

    private List<List<String>> solutionUsingHashMap(String[] strs) {
        /*
            Time Complexity:    O(n * m)
            Space Complexity:   O(n * m)
            Approach:           Using HashMap
            Note:               n is the number of words and m is the average length of the words.
        */

        List<List<String>> groupedAnagrams;

        //  Store CharFreqMap as Key & List of words that has the same CharFreqMap as Value
        Map<Map<Character, Integer>, List<String>> charFreqMapToWords = new HashMap<>();

        for (String currentWord : strs) {
            Map<Character, Integer> currentWordCharFreqMap = generateCharFreqMap(currentWord);

            //  Get the list of words for CurrentWord's CharFreqMap
            List<String> wordsWithSameCharFreq = charFreqMapToWords.getOrDefault(currentWordCharFreqMap, new ArrayList<>());
            wordsWithSameCharFreq.add(currentWord);

            //  Update charFreqMapToWords with currentWord Added to the list for currentWordCharFreqMap
            charFreqMapToWords.put(currentWordCharFreqMap, wordsWithSameCharFreq);
        }

        groupedAnagrams = new ArrayList<>(charFreqMapToWords.values());
        return groupedAnagrams;

    }

    private Map<Character, Integer> generateCharFreqMap(String word) {

        Map<Character, Integer> charFreqMap = new HashMap<>();

        for (Character c : word.toCharArray()) charFreqMap.put(c, charFreqMap.getOrDefault(c, 0) + 1);

        return charFreqMap;

    }

    //  ----------------------------------------------------------------------------------------------------

    private List<List<String>> solutionUsingHashMapWithCharFreqAsKey(String[] strs) {
        /*
            Time Complexity:    O(n * m)
            Space Complexity:   O(n * m)
            Approach:           Using HashMap
            Note:               n is the number of words and m is the average length of the words.
        */

        List<List<String>> groupedAnagrams;

        //  Store strKeyCharFreq as Key & List of words that has the same strKeyCharFreq as Value
        Map<String, List<String>> strKeyCharFreqToWords = new HashMap<>();

        for (String currentWord : strs) {
            String currentWordStrKeyCharFreq = generateStrKeyCharFreq(currentWord);

            List<String> wordsWithSameStrKeyCharFreq = strKeyCharFreqToWords.getOrDefault(currentWordStrKeyCharFreq, new ArrayList<>());
            wordsWithSameStrKeyCharFreq.add(currentWord);

            strKeyCharFreqToWords.put(currentWordStrKeyCharFreq, wordsWithSameStrKeyCharFreq);
        }

        groupedAnagrams = new ArrayList<>(strKeyCharFreqToWords.values());
        return groupedAnagrams;

    }

    private String generateStrKeyCharFreq(String word) {

        StringBuilder strKeyCharFreq = new StringBuilder();
        int[] arrCharFreq = new int[26];

        for (Character c : word.toCharArray()) arrCharFreq[c - 'a']++;

        //  Store Char Freq Pattern in the form of String | E.g.: AC - 1 0 1 0 0 0 ... -> 101000...
        for (int x : arrCharFreq) {
            /*
              To Separate the special edge case of bdddddddddd, bbbbbbbbbbc
              where the Char Freq Str becomes same for 2 different strings
              Hence, adding extra space before & after 2 digit freq as salt in the key to make Char Freq Str Key different for each string
              Before Salt: bdddddddddd -> 010100000000000000000000000  |  bbbbbbbbbbc -> 010100000000000000000000000
              After  Salt: bdddddddddd -> 010 10 000...  |  bbbbbbbbbbc -> 0 10 1000...
            */
            if (x > 9) strKeyCharFreq.append(" ");
            strKeyCharFreq.append(x);
            if (x > 9) strKeyCharFreq.append(" ");
        }

        return strKeyCharFreq.toString();

    }

    //  ----------------------------------------------------------------------------------------------------

    private List<List<String>> solutionUsingHashMapWithSortedWordAsKey(String[] strs) {
        /*
            Time Complexity:    O(n * m)
            Space Complexity:   O(n * m)
            Approach:           Using HashMap With Sorted Word As Key
            Note:               n is the number of words and m is the average length of the words.
        */

        List<List<String>> groupedAnagrams;

        //  Store strKeyCharFreq as Key & List of words that has the same strKeyCharFreq as Value
        Map<String, List<String>> sortedWordToWords = new HashMap<>();

        for (String word : strs) {

            char[] wordCharArr = word.toCharArray();
            Arrays.sort(wordCharArr);

            String sortedWord = new String(wordCharArr);

            if (!sortedWordToWords.containsKey(sortedWord))
                sortedWordToWords.put(sortedWord, new ArrayList<>());

            sortedWordToWords.get(sortedWord).add(word);

        }

        groupedAnagrams = new ArrayList<>(sortedWordToWords.values());
        return groupedAnagrams;

    }

    //  ----------------------------------------------------------------------------------------------------

    private List<List<String>> solutionUsingCharFreqArr(String[] strs) {
        /*
            Time Complexity:    O(n * m)
            Space Complexity:   O(n * m)
            Approach:           Using Character Frequency Array
            Note:               n is the number of words and m is the average length of the words.
        */

        List<List<String>> groupedAnagrams = new ArrayList<>();

        //  Generate CharFreqArr for all words of strs
        int[][] charFreqArrays = generateCharFreqArrOfAllWords(strs);
        boolean[] isProcessed = new boolean[strs.length];

        List<String> currentAnagramGroup = new ArrayList<>();
        int leftPointer = 0;
        int rightPointer = 0;

        //  Iterate each word of strs
        while (leftPointer < strs.length) {

            int[] leftWordFreqArr = charFreqArrays[leftPointer];

            if (isProcessed[leftPointer]) {
                leftPointer++;
                rightPointer = leftPointer;
                continue;
            } else if (leftPointer == rightPointer) currentAnagramGroup.add(strs[leftPointer]);

            rightPointer++;

            if (rightPointer == strs.length) {
                //  Move leftPointer by 1 & reset rightPointer with leftPointer
                isProcessed[leftPointer] = true;
                leftPointer++;
                rightPointer = leftPointer;

                groupedAnagrams.add(currentAnagramGroup);
                currentAnagramGroup = new ArrayList<>();

            } else if (Arrays.equals(leftWordFreqArr, charFreqArrays[rightPointer])) {
                currentAnagramGroup.add(strs[rightPointer]);
                isProcessed[rightPointer] = true;
            }

        }

        return groupedAnagrams;
    }

    private int[][] generateCharFreqArrOfAllWords(String[] words) {

        int[][] arrOfCharFreqArr = new int[words.length][26];

        for (int i = 0; i < words.length; i++) {
            String currentWord = words[i];

            int[] tempArrCharFreq = new int[26];
            for (char c : currentWord.toCharArray()) tempArrCharFreq[c - 'a']++;

            arrOfCharFreqArr[i] = tempArrCharFreq;
        }

        return arrOfCharFreqArr;
    }

    //  ----------------------------------------------------------------------------------------------------

}
```

----------------------------------------------------------------------------------------------------
