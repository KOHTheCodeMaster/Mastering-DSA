
Start Date:      5th May 2K23 - 12:22 PM
Last Modified:  12th May 2K23 - 01:53 PM

Title: Sliding Window

----------------------------------------------------------------------------------------------------

Short & Crisp Notes:
--------------------

Definition: The Sliding Window technique is a commonly used algorithmic pattern for efficiently processing arrays or lists by maintaining a window of elements.

Basic Idea: The technique involves using two pointers to define a window and sliding the window over the array or list to process the elements within the window.

Data Structure: The Sliding Window technique can be applied to arrays, lists, strings, and other sequential data structures.

Window Size: The window size can be fixed or variable, depending on the problem requirements.

Problem-solving: The Sliding Window technique is useful for solving problems that involve finding subarrays or sublists with specific properties, such as maximum or minimum sum, longest subarray with a given sum, longest substring with unique characters, etc.

Optimization: The technique aims to optimize time complexity by avoiding redundant computations through reusing previous computations.

Time Complexity: The Sliding Window technique generally achieves linear time complexity, O(n), by processing each element only once.

Space Complexity: The space complexity depends on the problem requirements and additional data structures used. It can range from O(1) to O(n) in most cases.

Complementary Techniques: The Sliding Window technique can be combined with other techniques like Two Pointers, Binary Search, and Dynamic Programming for solving complex problems.

Use Cases:
- Finding the maximum or minimum sum of subarrays or sublists.
- Finding the longest subarray or sublist with a given sum or property.
- Finding the longest substring with unique characters.
- Finding the number of subarrays or sublists satisfying certain conditions.
- Finding the median or average of all subarrays of a given size.


----------------------------------------------------------------------------------------------------

Example: LeetCode Problem #209. Minimum Size Subarray Sum
Given an array of positive integers and a target sum, find the minimum size of a contiguous subarray whose sum is greater than or equal to the target.

Algorithm: Sliding Window - finding the minimum size subarray with a given sum

1.  Initialize the window's left and right pointers to the start of the array or list.
    left = 0, right = 0
2.  Initialize variables to track the minimum window size and current window sum.
    minSize = infinity, windowSum = 0
3.  Iterate the right pointer over the array or list:
    - Add the current element to the window sum.
    - If the window sum is greater than or equal to the target sum, do the following:
        - Update the minimum window size if necessary.
        - Subtract the leftmost element from the window sum.
        - Move the left pointer to the right by one.
4. Repeat step 3 until the right pointer reaches the end of the array or list.
5. Return the minimum window size. If no valid window is found, return 0.

Time Complexity: O(n) | Space Complexity: O(1)

Java Code Solution:

public int minSubArrayLen(int target, int[] nums) {
    /*
        Time Complexity: O(n)
        Space Complexity: O(1)
        Approach: Sliding Window
    */

    int left = 0;
    int minSize = Integer.MAX_VALUE;
    int windowSum = 0;

    for (int right = 0; right < nums.length; right++) {
        windowSum += nums[right];

        while (windowSum >= target) {
            minSize = Math.min(minSize, right - left + 1);
            windowSum -= nums[left];
            left++;
        }
    }

    return minSize != Integer.MAX_VALUE ? minSize : 0;
}

----------------------------------------------------------------------------------------------------

LeetCode Problems:

#3:     Longest Substring Without Repeating Characters - https://leetcode.com/problems/longest-substring-without-repeating-characters/
#76:    Minimum Window Substring - https://leetcode.com/problems/minimum-window-substring/
#209:   Minimum Size Subarray Sum - https://leetcode.com/problems/minimum-size-subarray-sum/
#239:   Sliding Window Maximum - https://leetcode.com/problems/sliding-window-maximum/
#424:   Longest Repeating Character Replacement - https://leetcode.com/problems/longest-repeating-character-replacement/
#567:   Permutation in String - https://leetcode.com/problems/permutation-in-string/
#632:   Smallest Range Covering Elements from K Lists - https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/

----------------------------------------------------------------------------------------------------

Resources
---------

1. YouTube - Sliding Window Technique - Algorithmic Mental Models
   URL: https://www.youtube.com/watch?v=MK-NZ4hN7rs

----------------------------------------------------------------------------------------------------

