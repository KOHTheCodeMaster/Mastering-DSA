
Start Date:      3rd May 2K23 - 10:18 PM
Last Modified:  12th May 2K23 - 01:53 PM

Title: Two Pointers

----------------------------------------------------------------------------------------------------

Short & Crisp Notes:
--------------------

Definition: Two Pointers is a technique used for iterating over a sorted array or list using two pointers or indices.

Basic Idea: Use two pointers to traverse the array or list in parallel, typically starting at different ends or positions.

Data Structure: Two Pointers technique is applicable to sorted arrays, lists, or collections.

Index Tracking: Keep track of pointer indices to handle edge cases and prevent out-of-bounds errors.

Problem-solving: Two Pointers can be used for finding pairs, searching for subarrays with specific sums, merging sorted arrays, and more.

Relationship with Sorting: Two Pointers often complement sorting algorithms like merge sort or quicksort.

Time Complexity: Two Pointers technique reduces time complexity from O(n^2) to O(n) or O(n log n), improving efficiency.

Space Complexity: O(1) since only two pointers or indices are used.

Complementary Techniques: Combine Two Pointers with binary search, sliding windows, and sorting algorithms for solving complex problems.

Use Cases:
- Finding pairs with a given sum,
- Finding the longest subarray with a given sum,
- Finding duplicates,
- Finding the longest substring without repeating characters,
- Removing duplicates from a sorted array or list,
- Sliding windows - such as finding the maximum sum of a subarray of size k,
- Reversing elements of an array or list, such as reversing a subarray of size k.

----------------------------------------------------------------------------------------------------

Example: LeetCode Problem# 167. Two Sum II - Input Array Is Sorted
Given a sorted array, find two elements that add up to a given target sum.

Algorithm: Two Pointers - finding the pair with a given sum in a sorted array

1.  Initialize two pointers "leftIndex" and "rightIndex" to the start and end of the array respectively.
    leftIndex = 0, rightIndex = length of numbers - 1
2. While leftIndex < rightIndex, do the following:
    A. Check if the sum of numbers[leftIndex] and numbers[rightIndex] equals the target. If yes, break the loop.
    B. If the sum is greater than the target, decrement rightIndex by 1.
    C. If the sum is less than the target, increment leftIndex by 1.
3.  Return an array of two integers, the indices of the two elements whose sum equals the target.
    return [leftIndex + 1, rightIndex + 1]  //  Adding + 1 since the indices are 1-based in the problem.
4.  End of Algorithm.

The result array will contain the indices of the pair in the numbers array that adds up to the target.
Time Complexity: O(n)   |   Space Complexity: O(1)

Java Code Solution:

public int[] findPairWithSum(int[] numbers, int target) {
    /*
        Time Complexity:    O(n)
        Space Complexity:   O(1)
        Approach:           Using Two Pointers
    */

    int leftIndex = 0;
    int rightIndex = numbers.length - 1;

    while (leftIndex < rightIndex) {
        if (numbers[leftIndex] + numbers[rightIndex] == target) break;
        else if (numbers[leftIndex] + numbers[rightIndex] > target) rightIndex--;
        else leftIndex++;
    }

    return new int[] { leftIndex + 1, rightIndex + 1};

}

----------------------------------------------------------------------------------------------------

LeetCode Problems:

#1:     Two Sum - https://leetcode.com/problems/two-sum/
#15:    3Sum - https://leetcode.com/problems/3sum/
#16:    3Sum Closest - https://leetcode.com/problems/3sum-closest/
#26:    Remove Duplicates from Sorted Array - https://leetcode.com/problems/remove-duplicates-from-sorted-array/
#27:    Remove Element - https://leetcode.com/problems/remove-element/
#42:    Trapping Rain Water - https://leetcode.com/problems/trapping-rain-water/
#88:    Merge Sorted Array - https://leetcode.com/problems/merge-sorted-array/
#167:   Two Sum II - https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/
#345:   Reverse Vowels of a String - https://leetcode.com/problems

----------------------------------------------------------------------------------------------------

Extra Notes:
------------

The Two Pointers technique is not well suited for solving LeetCode Problem #1: Two Sum, because the input array is not sorted.

The Two Pointers technique is typically used for problems where the input array is sorted, and we need to find a specific element or a pair of elements that meet certain criteria. For example, finding a pair of elements in a sorted array that add up to a given target sum can be solved using the Two Pointers technique in O(n) time complexity.

However, for an unsorted array like the one in LeetCode problem 1, we cannot use the Two Pointers technique alone. We need to use some Auxilary Data Structure, such as a Hash Table or HashMap.

----------------------------------------------------------------------------------------------------
